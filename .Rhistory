d = normalisations(d)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHPOS3gr = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotPOS3grams = cahPlotCol(myCAH, k = 9, main = "POS 3-grams (Transkr/Boudams/Pie/Pie)")
somCAH = somCluster(d)
somCAHPOS3gr = somCAH
somplotPOS3grams = cahPlotCol(somCAH, k = 9, main = "SOM BASED - POS 3-grams")
data = read.csv("data/transkr_lemmas.csv", header = TRUE, row.names = 1, sep = ";")
#remove total freq
data = data[, -1]
colnames(data) = gsub("^X", "", colnames(data))
colnames(data) = gsub(".decolumnized", "", colnames(data))
colnames(data) = gsub("Leg.", "Leg-", colnames(data))
data = data[, toKeep]
data = data[rowSums(data) > 0, ]
data = as.matrix(data)
d = data
# Selection based on Moisl 2011
select = selection(d, z = 1.645)
select = select[,4]
# Normalisations
d = relativeFreqs(d)
d = d[select,]
LemmasSave = d
d = normalisations(d)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHLemmas = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotLemmas = cahPlotCol(myCAH, k = 9, main = "Lemmas (Transkr/Boudams/Pie/Pie)")
somCAH = somCluster(d)
somCAHLemmas = somCAH
somplotLemmas = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Lemmas")
# Find function words
#rownames(data)[1:250]
functionLemmas = source("functionLemmas.R")$value
d = relativeFreqs(data)
d = d[functionLemmas,]
FLSave = d
d = normalisations(d)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHFL = myCAH
# barplot(sort(myCAH$height))
plotFL = cahPlotCol(myCAH, k = 8, main = "Function Lemmas with pronouns and auxiliaries\n(Transkr/Boudams/Pie)")
#plotCol(myCAH, main = "toto")
somCAH = somCluster(d)
somCAHFL = somCAH
somplotFL = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Function words (lemmas)")
data = rbind(AffixesSave, POS3grSave, FLSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (lemmas)")
somCAH = somCluster(d)
somCAHGlob = somCAH
somplotGlob = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Affixes + POS 3- grams + Function words (lemmas)")
data = rbind(LemmasSave, WordsSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHWordsLemmas = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotWordsLemmas = cahPlotCol(myCAH, k = 9, main = "Word forms + lemmas")
somCAH = somCluster(d)
somCAHWordsLemmas = somCAH
somplotWordsLemmas = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Word forms + lemmas")
cahList = list(raw3grams = CAHRaw3gr, Affs = CAHAffs, FunctLemm = CAHFL, POS3gr = CAHPOS3gr, FLPOSandAffs = CAHGlob, Forms = CAHForms,  Lemmas = CAHLemmas, WordsLemmas = CAHWordsLemmas, UnnormFW = CAHFW)
#compareHC(cahList, k = 9)
benchmark = benchmarkHC(CAHRaw3gr, cahList, k = 9)
round(benchmark, digits = 2)
# Now with SOM
cahSOMList = list(raw3grams = somCAHRaw3gr, Affs = somCAHAffs, FunctLemm = somCAHFL, POS3gr = somCAHPOS3gr, FLPOSandAffs = somCAHGlob, Forms = somCAHForms,  Lemmas = somCAHLemmas, WordsLemmas = somCAHWordsLemmas, UnnormFW = somCAHFW)
benchmark = benchmarkHC(CAHRaw3gr, cahSOMList, k = 9)
round(benchmark, digits = 2)
# Prepare results
results = matrix(ncol = 4, nrow = length(cahList),
dimnames = list(labels(cahList), c("N", "AC", "CPMeyer", "CPREF")))
i = 1
N = ncol(cahList[[i]]$data)
N
# 1. Purity with regard to Wauchier/non-Wauchier
classes1 = cutree(as.hclust(cahList[[i]]), k = k)
k = 9
# 1. Purity with regard to Wauchier/non-Wauchier
classes1 = cutree(as.hclust(cahList[[i]]), k = k)
expected = classes1
rownames(cahList[[i]]$data
)
expected[grep("Leg-A", rownames(cahList[[i]]$data), invert = TRUE)] = "Leg-A"
expected[grep("Leg-A", rownames(cahList[[i]]$data))] = "Leg-A"
expected[grep("Leg-B", rownames(cahList[[i]]$data))] = "Leg-B"
expected[grep("Leg-C", rownames(cahList[[i]]$data))] = "Leg-C"
expected[grep("_Wau_", rownames(cahList[[i]]$data))] = "Wauchier"
expected
CPMeyer = NMF::purity(as.factor(classes1), as.factor(expected))
CPMeyer
benchmarkHC = function(refCAH, cahList, k = 10){
# Prepare results
results = matrix(ncol = 4, nrow = length(cahList),
dimnames = list(labels(cahList), c("N", "AC", "CPMeyer", "CPREF")))
for (i in 1:length(cahList)){
N = ncol(cahList[[i]]$data)
# 1. Purity with regard to Wauchier/non-Wauchier
classes1 = cutree(as.hclust(cahList[[i]]), k = k)
expected = classes1
# Now we set 1 for Wauchier, 2 for NOT Wauchier
expected[grep("Leg-A", rownames(cahList[[i]]$data))] = "Leg-A"
expected[grep("Leg-B", rownames(cahList[[i]]$data))] = "Leg-B"
expected[grep("Leg-C", rownames(cahList[[i]]$data))] = "Leg-C"
expected[grep("_Wau_", rownames(cahList[[i]]$data))] = "Wauchier"
CPMeyer = NMF::purity(as.factor(classes1), as.factor(expected))
# 2. Quality of clustering with HC
AC = cahList[[i]]$ac
# 3. Stability: CP with regard to a reference HC
classes2 = cutree(as.hclust(refCAH), k = k)
CPRef = NMF::purity(as.factor(classes1), as.factor(classes2))
results[i, ] = c(N, AC, CPMeyer, CPRef)
}
return(results)
}
benchmark = benchmarkHC(CAHRaw3gr, cahList, k = 9)
round(benchmark, digits = 2)
data = rbind(AffixesSave, POS3grSave, FWSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob2 = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob2 = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (unnorm.)")
plotGlob2
data = rbind(AffixesSave, POS3grSave, FWSave, FLSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob3 = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob3 = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (unnorm.)")
plotGlob3
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob3 = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (both)")
gridExtra::grid.arrange(plotGlob, plotGlob2, plotGlob3, ncol = 1)
cahList = list(raw3grams = CAHRaw3gr, Affs = CAHAffs, FunctLemm = CAHFL, POS3gr = CAHPOS3gr, FLPOSandAffs = CAHGlob, FWPOSandAffs = CAHGlob2, FWFLPOSandAffs = CAHGlob3, Forms = CAHForms,  Lemmas = CAHLemmas, WordsLemmas = CAHWordsLemmas, UnnormFW = CAHFW)
benchmark = benchmarkHC(CAHRaw3gr, cahList, k = 9)
round(benchmark, digits = 2)
data = rbind(AffixesSave, POS3grSave, FWSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob2 = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob2 = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (unnorm.)")
somCAH = somCluster(d)
somCAHGlob = somCAH
somplotGlob2 = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Affixes + POS 3- grams + Function words (unnorm.)")
data = rbind(AffixesSave, POS3grSave, FWSave, FLSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob3 = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob3 = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (both)")
somCAH = somCluster(d)
somCAHGlob = somCAH
somplotGlob3 = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Affixes + POS 3- grams + Function words (unnorm.)")
# Now with SOM
cahSOMList = list(raw3grams = somCAHRaw3gr, Affs = somCAHAffs, FunctLemm = somCAHFL, POS3gr = somCAHPOS3gr, FLPOSandAffs = somCAHGlob, FWPOSandAffs = somCAHGlob2, FLFWPOSandAffs = somCAHGlob3, Forms = somCAHForms,  Lemmas = somCAHLemmas, WordsLemmas = somCAHWordsLemmas, UnnormFW = somCAHFW)
data = rbind(AffixesSave, POS3grSave, FWSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob2 = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob2 = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (unnorm.)")
somCAH = somCluster(d)
somCAHGlob2 = somCAH
somplotGlob2 = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Affixes + POS 3- grams + Function words (unnorm.)")
data = rbind(AffixesSave, POS3grSave, FLSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (lemmas)")
somCAH = somCluster(d)
somCAHGlob = somCAH
somplotGlob = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Affixes + POS 3- grams + Function words (lemmas)")
# Now with SOM
cahSOMList = list(raw3grams = somCAHRaw3gr, Affs = somCAHAffs, FunctLemm = somCAHFL, POS3gr = somCAHPOS3gr, FLPOSandAffs = somCAHGlob, FWPOSandAffs = somCAHGlob2, FLFWPOSandAffs = somCAHGlob3, Forms = somCAHForms,  Lemmas = somCAHLemmas, WordsLemmas = somCAHWordsLemmas, UnnormFW = somCAHFW)
data = rbind(AffixesSave, POS3grSave, FWSave, FLSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob3 = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob3 = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (both)")
somCAH = somCluster(d)
somCAHGlob3 = somCAH
somplotGlob3 = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Affixes + POS 3- grams + Function words (unnorm.)")
data = rbind(AffixesSave, POS3grSave, FWSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob2 = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob2 = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (unnorm.)")
somCAH = somCluster(d)
somCAHGlob2 = somCAH
somplotGlob2 = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Affixes + POS 3- grams + Function words (unnorm.)")
data = rbind(AffixesSave, POS3grSave, FLSave)
d = normalisations(data)
myCAH = cluster::agnes(t(d), metric = "manhattan", method="ward")
# Save
CAHGlob = myCAH
#TODO: heights
# barplot(sort(myCAH$height))
plotGlob = cahPlotCol(myCAH, k = 9, main = "Affixes + POS 3- grams + Function words (lemmas)")
somCAH = somCluster(d)
somCAHGlob = somCAH
somplotGlob = cahPlotCol(somCAH, k = 9, main = "SOM BASED - Affixes + POS 3- grams + Function words (lemmas)")
# Now with SOM
cahSOMList = list(raw3grams = somCAHRaw3gr, Affs = somCAHAffs, FunctLemm = somCAHFL, POS3gr = somCAHPOS3gr, FLPOSandAffs = somCAHGlob, FWPOSandAffs = somCAHGlob2, FLFWPOSandAffs = somCAHGlob3, Forms = somCAHForms,  Lemmas = somCAHLemmas, WordsLemmas = somCAHWordsLemmas, UnnormFW = somCAHFW)
benchmark = benchmarkHC(CAHRaw3gr, cahSOMList, k = 9)
round(benchmark, digits = 2)
cahList = cahSOMList
# Prepare results
results = matrix(ncol = 4, nrow = length(cahList),
dimnames = list(labels(cahList), c("N", "AC", "CPMeyer", "CPREF")))
N = ncol(cahList[[i]]$data)
N
# 1. Purity with regard to Wauchier/non-Wauchier
classes1 = cutree(as.hclust(cahList[[i]]), k = k)
classes1
expected = classes1
expected[grep("Leg-A", rownames(cahList[[i]]$data))] = "Leg-A"
expected[grep("Leg-B", rownames(cahList[[i]]$data))] = "Leg-B"
expected[grep("Leg-C", rownames(cahList[[i]]$data))] = "Leg-C"
expected[grep("_Wau_", rownames(cahList[[i]]$data))] = "Wauchier"
expected
expected[grep("Leg\.A", rownames(cahList[[i]]$data))] = "Leg-A"
expected[grep("Leg.A", rownames(cahList[[i]]$data))] = "Leg-A"
expected
expected[grep("Leg.A", rownames(cahList[[i]]$data))] = "Leg-A"
expected[grep("Leg.B", rownames(cahList[[i]]$data))] = "Leg-B"
expected[grep("Leg.C", rownames(cahList[[i]]$data))] = "Leg-C"
expected[grep("_Wau_", rownames(cahList[[i]]$data))] = "Wauchier"
CPMeyer = NMF::purity(as.factor(classes1), as.factor(expected))
CPMeyer
benchmarkHC = function(refCAH, cahList, k = 10){
# Prepare results
results = matrix(ncol = 4, nrow = length(cahList),
dimnames = list(labels(cahList), c("N", "AC", "CPMeyer", "CPREF")))
for (i in 1:length(cahList)){
N = ncol(cahList[[i]]$data)
# 1. Purity with regard to Wauchier/non-Wauchier
classes1 = cutree(as.hclust(cahList[[i]]), k = k)
expected = classes1
# Now we set 1 for Wauchier, 2 for NOT Wauchier
expected[grep("Leg.A", rownames(cahList[[i]]$data))] = "Leg-A"
expected[grep("Leg.B", rownames(cahList[[i]]$data))] = "Leg-B"
expected[grep("Leg.C", rownames(cahList[[i]]$data))] = "Leg-C"
expected[grep("_Wau_", rownames(cahList[[i]]$data))] = "Wauchier"
CPMeyer = NMF::purity(as.factor(classes1), as.factor(expected))
# 2. Quality of clustering with HC
AC = cahList[[i]]$ac
# 3. Stability: CP with regard to a reference HC
classes2 = cutree(as.hclust(refCAH), k = k)
CPRef = NMF::purity(as.factor(classes1), as.factor(classes2))
results[i, ] = c(N, AC, CPMeyer, CPRef)
}
return(results)
}
benchmark = benchmarkHC(CAHRaw3gr, cahSOMList, k = 9)
round(benchmark, digits = 2)
somCAHGlob2
plotsomCAHGlob2
somplotGlob3
gridExtra::grid.arrange(plotRaw3grams, plotGlob2, plotWordsLemmas, ncol = 1)
cahList = list(raw3grams = CAHRaw3gr, Affs = CAHAffs, FunctWords = CAHFW, FunctLemm = CAHFL, POS3gr = CAHPOS3gr, FWPOSandAffs = CAHGlob2, Forms = CAHForms,  Lemmas = CAHLemmas, WordsLemmas = CAHWordsLemmas)
vol = volatility(cahList, k = 9)
out = merge(round(vol, digits = 2), nwords, by="row.names", all.x=TRUE, all.y=FALSE)
out[order(out[, "V_i"]), ]
# see if there is a correlation
reg = lm(out[, 3] ~ out[, 2])
summary(reg)
plot(out[, 2], out[, 3])
abline(reg)
# Et la distrib des VI
boxplot(out[, 2])
hist(out[, 2])
# ONLY on the three reference analyses
refCAH = list(raw3grams = CAHRaw3gr,  FWPOSandAffs = CAHGlob2, WordsLemmas = CAHWordsLemmas)
vol = volatility(refCAH, k = 9)
out = merge(round(vol, digits = 2), nwords, by="row.names", all.x=TRUE, all.y=FALSE)
out[order(out[, "V_i"]), ]
# see if there is a correlation
reg = lm(out[, 3] ~ out[, 2])
summary(reg)
plot(out[, 2], out[, 3])
abline(reg)
# see if there is a correlation
reg = lm(out[, 3] ~ out[, 2])
summary(reg)
plot(out[, 3], out[, 2])
abline(reg)
# see if there is a correlation
reg = lm(out[, 3] ~ out[, 2])
summary(reg)
plot(out[, 3], out[, 2])
abline(reg)
# see if there is a correlation
reg = lm(out[, 3] ~ out[, 2])
summary(reg)
plot(out[, 2], out[, 3])
abline(reg)
plot(reg)
refCAH
# ONLY on the three reference analyses
cahList = list(raw3grams = CAHRaw3gr,  FWPOSandAffs = CAHGlob2, WordsLemmas = CAHWordsLemmas)
vol = volatility(cahList, k = 9)
volRef = merge(round(vol, digits = 2), nwords, by="row.names", all.x=TRUE, all.y=FALSE)
# ONLY on the three reference analyses
cahList = list(Affs = CAHAffs, FunctWords = CAHFW, FunctLemm = CAHFL, POS3gr = CAHPOS3gr, Forms = CAHForms,  Lemmas = CAHLemmas)
vol = volatility(cahList, k = 9)
volSuppl = merge(round(vol, digits = 2), nwords, by="row.names", all.x=TRUE, all.y=FALSE)
volSuppl[order(volSuppl[, "V_i"]), ]
hist(volSuppl[, 2])
merge(volRef, volSuppl, by="row.names", all.x=TRUE, all.y=TRUE)
out = merge(volRef, volSuppl, by="row.names", all.x=TRUE, all.y=TRUE)
volSuppl
out
View(out)
out[, 2]
rownames(out) = out[, 2]
out
View(out)
out[, c(4, 3, 6)]
out = out[, c(4, 3, 6)]
out
colnames(out) = c("NWords", "V_iRef", "V_iSuppl")
out
out[order(out[, 2])]
out[order(out[, 2]),]
out[order(out[, 3]),]
ggplot(out, aes(V_iRef, V_iSuppl, NWords))
ggplot(out, aes(V_iRef, NWords))
ggplot(out, aes(NWords, V_iRef, V_iSuppl))
volRef
cbind(volRef[, 3], volRef[, 1], "V_i Ref")
cbind(volRef[, 3], volRef[, 2], "V_i Ref")
cbind(as.data.frame(volRef[, 3], volRef[, 2], "V_i Ref"))
as.data.frame(cbind(volRef[, 3], volRef[, 2], "V_i Ref"))
# First, transform data
volRegr = as.data.frame(cbind(volRef[, 3], volRef[, 2], "V_i Ref"))
as.data.frame(cbind(volSuppl[, 3], volSuppl[, 2], "V_i Suppl"))
rbind(volRegr,
as.data.frame(cbind(volSuppl[, 3], volSuppl[, 2], "V_i Suppl")))
volRegr = rbind(volRegr,
as.data.frame(cbind(volSuppl[, 3], volSuppl[, 2], "V_i Suppl")))
colnames(volRegr) = c("NWords", "V_i", "type")
volRegr
# First, transform data
volRegr = as.data.frame(cbind(volRef[, 3], volRef[, 2], "Ref"))
volRegr = rbind(volRegr,
as.data.frame(cbind(volSuppl[, 3], volSuppl[, 2], "Suppl")))
colnames(volRegr) = c("NWords", "V_i", "type")
ggplot(volRegr, aes(NWords, V_i))
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type))
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw()
?data.frame
data.frame(Nwords = volRef[, 3], V_i = volRef[, 2], type = "Ref")
volRegr = data.frame(Nwords = volRef[, 3], V_i = volRef[, 2], type = "Ref")
mean(volRegr$Nwords)
mean(volRegr$V_i)
mean(volRegr$type)
data.frame(Nwords = volSuppl[, 3], V_i = volSuppl[, 2], type = "Suppl")
volRegr = rbind( data.frame(Nwords = volRef[, 3], V_i = volRef[, 2], type = "Ref"),
data.frame(Nwords = volSuppl[, 3], V_i = volSuppl[, 2], type = "Suppl"))
volRegr
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw()
volRegr
# First, transform data
volRegr = rbind( data.frame(NWords = volRef[, 3], V_i = volRef[, 2], type = "Ref"),
data.frame(NWords = volSuppl[, 3], V_i = volSuppl[, 2], type = "Suppl"))
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw()
?geom_smooth
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw() + stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))), label.x.npc = 0.4, label.y.npc = 1)
?stat_fit_glance
??stat_fit_glance
library(ggpmisc)
install.packages("ggpmisc")
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw() + ggpmisc::stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))), label.x.npc = 0.4, label.y.npc = 1)
install.packages("ggpmisc")
install.packages("ggpmisc")
install.packages("ggpmisc")
install.packages("ggpmisc")
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw() + ggpmisc::stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))), label.x.npc = 0.4, label.y.npc = 1)
library(ggplot2)
library("ggplot2")
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw() + ggpmisc::stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))), label.x.npc = 0.4, label.y.npc = 1)
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw() + ggpmisc::stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))), label.x.npc = 0.4, label.y.npc = 1)
library(ggplot2)
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw() + ggpmisc::stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))), label.x.npc = 0.4, label.y.npc = 1)
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) +
theme_bw() + ggpmisc::stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))))
?ggpmisc::stat_fit_glance
myFormula = V_i ~ NWords
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", formula = myFormula) +
geom_point(size=3) +
theme_bw()
volRegr
myFormula = `V_i` ~ NWords
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", formula = myFormula) +
geom_point(size=3) +
theme_bw()
myFormula = quote(V_i) ~ NWords
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", formula = myFormula) +
geom_point(size=3) +
theme_bw()
myFormula = quote(V_i) ~ quote(NWords)
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", formula = myFormula) +
geom_point(size=3)
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", se=FALSE, formula = myFormula) +
geom_point(size=3) +
theme_bw()
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", se=FALSE) +
geom_point(size=3) +
theme_bw()
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", formula = myFormula) +
geom_point(size=3) + theme_bw() +
stat_poly_eq(formula = quote(V_i) ~ quote(NWords),
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", formula = myFormula) +
geom_point(size=3) + theme_bw() +
ggpmisc::stat_poly_eq(formula = quote(V_i) ~ quote(NWords),
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
?stat_poly_eq
library(ggpmisc)
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm", formula = myFormula) +
geom_point(size=3) + theme_bw() +
# ggpmisc::stat_poly_eq(formula = quote(V_i) ~ quote(NWords), aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE)
ggpmisc::stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))), label.x.npc = 0.4, label.y.npc = 1)
?stat_smooth
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) + theme_bw() +
# ggpmisc::stat_poly_eq(formula = quote(V_i) ~ quote(NWords), aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE)
ggpmisc::stat_fit_glance(method = 'lm', geom = 'text', aes(label = paste0('p = ', round(..p.value.., 3))), label.x.npc = 0.4, label.y.npc = 1)
class(volRegr)
class(volRegr$NWords)
class(volRegr$V_i)
class(volRegr$type)
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) + theme_bw()
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) + theme_bw() +
# ggpmisc::stat_poly_eq(formula = quote(V_i) ~ quote(NWords), aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE)
ggpmisc::stat_fit_glance(method = 'lm')
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) + theme_bw() +
# ggpmisc::stat_poly_eq(formula = quote(V_i) ~ quote(NWords), aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE)
ggpmisc::stat_fit_glance(method = 'lm', aes(label = paste0('p = ', round(..p.value.., 3))))
?stat_fit_glance
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) + theme_bw() +
# ggpmisc::stat_poly_eq(formula = quote(V_i) ~ quote(NWords), aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE)
ggpmisc::stat_fit_glance(method = 'lm', aes(label = paste0('p = ', round(..p.value.., 3), ..rr.label..)))
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) + theme_bw() +
# ggpmisc::stat_poly_eq(formula = quote(V_i) ~ quote(NWords), aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE)
ggpmisc::stat_fit_glance(method = 'lm', aes(label = paste0('p = ', round(..p.value.., 3), " Adj. R² = ", ..adj.r.squared..)))
ggplot(volRegr, aes(NWords, V_i, shape=type, colour=type, fill=type)) + geom_smooth(method="lm") +
geom_point(size=3) + theme_bw() +
# ggpmisc::stat_poly_eq(formula = quote(V_i) ~ quote(NWords), aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE)
ggpmisc::stat_fit_glance(method = 'lm', aes(label = paste0('p = ', round(..p.value.., 3), " Adj. R² = ", round(..adj.r.squared.., 3))))
